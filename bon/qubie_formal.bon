static_diagram QUBIE_TOPLEVEL
component 
	cluster MAIN
	component 
	    class QUBIE_STATE
	    inherit VALUE
	    invariant
	      Current member_of {power_on, booting, running, stopped, off}
	    end
	    deferred class QUBIE_INTERFACE
	    feature
			--the following booleans represent possible qubie states
			booting : BOOLEAN 
			  ensure Result = (state = booting) end
			running : BOOLEAN 
			  ensure Result = (state = running) end
			stopped : BOOLEAN --qubie has run and stopped
			  ensure Result = (state = stopped) end
			state : QUBIE_STATE
			deferred log : LOG
			deferred qubie : QUBIE_INTERFACE 

			start_booting 
				require
					power_on; 
					--power_on or stopped; //currently soft reset is not allowed
				ensure
					state = booting;
					log.logged(Current);
				end
			start_running -- : Void 
				require
					booting
				ensure
					state = running;
					log.logged(Current);
				end
			stop_running 
				require running
				ensure
					state = stopped;
					log.logged(Current);
				end
			power_off
				ensure
					state = off;
					log.logged(Current);
					log.flush;
				end
			publish_log
				ensure
					log.publish
				end
			
			update_state	--mapping to allow external acces to change states
				-> the_state : QUBIE_STATE
				require
					the_state member_of legal_state;
				ensure
					(the_state = booting) -> qubie.start_booting;
					(the_state = running) -> qubie.start_running;
					(the_state = stopped) -> qubie.stop_running;
					(the_state = off) -> qubie.power_off;
				end
				
	    	legal_states : SET[QUBIE_STATE]
	    		ensure
	    			Result = {booting, running, stopped, off};
	    		end
	    end

		effective class QUBIE
		inherit QUBIE_INTERFACE
		feature
			
			observations : OBSERVATIONS
				require not booting end	
			wifi_monitor : WIFI_MONITOR
				require not booting end
			bt_communicator : BLUETOOTH_COMMUNICATOR
				require not booting end
			effective log : LOG
			effective qubie : QUBIE 
				ensure Result = Current; end

			redefined legal_states : SET[QUBIE_STATE]
				ensure Result = {running, stopped}; end

			record_observation 
				-> contact_record : CONTACT_RECORD
				ensure 
					delta {observations, log}; --if observations is a sequence/list we could limit to observations(size)
					observations.contains(contact_record);
					log.logged(Current);
				end
			initialized --TODO get consensus on syntax
				ensure 
					log.empty;
					observations.empty;
				end

--		constraint
--			old(stopped) implies stopped	
		end	
	end
end


static_diagram QUBIE_MONITOR
component
	class MONITOR
	feature 
		booting : BOOLEAN
		running : BOOLEAN
		auto_hopping : BOOLEAN
		keyed_hash : KEYED_HASH
		frequency_range : SET[FREQUENCY]
		frequency : FREQUENCY
		qubie : QUBIE
		
		start
			require
				keyed_hash.set;
				not booting;
				not running;
			ensure
				--delta {Current, qubie.observations, qubie.log};
				running;
				qubie.log.logged(Current);
			end
		stop 
			require
				running;
			ensure
				not running; 
				qubie.log.logged(Current);
			end
		set_frequency 
			-> the_frequency : FREQUENCY
			ensure 
				delta {frequency, qubie.log};
				frequency=the_frequency; 
				qubie.log.logged(Current);	
			end
		set_auto_hopping 
			-> the_truth_value : BOOLEAN
			ensure 
				delta {auto_hopping, qubie.log};
				auto_hopping=the_truth_value; 
				qubie.log.logged(Current);	
			end
		report_detected_device
			-> the_mac_address : VALUE
			-> the_signal_strength : VALUE
			ensure
				delta {qubie.observations, qubie.log};
				qubie.observations.contains(CONTACT_RECORD.make(keyed_hash, the_mac_address, the_signal_strength));
				qubie.log.logged(Current);	
			end
		--TODO the keyed hash is never changed after running
	end
	
	class FREQUENCY
	inherit VALUE
	end
	class WIFI_MONITOR
	inherit MONITOR
	end
end
	


static_diagram QUBIE_COMMUNICATOR
component
	effective class COMMUNICATOR
	inherit QUBIE_INTERFACE
	feature
		effective qubie : QUBIE
		effective log : LOG
			ensure Result = qubie.log; end
		qubie_state : QUBIE_STATE
			ensure
				Result=qubie.state;
			end
		redefined update_qubie_state {^QUBIE_INTERFACE.update_state}
			-> the_state : QUBIE_STATE
	
		redefined legal_states : SET[QUBIE_STATE]
			ensure Result = {stopped, off}; end

	end
	class BLUETOOTH_COMMUNICATOR
	inherit COMMUNICATOR
	feature
		subscribed : BOOLEAN
		bt_client : BLUETOOTH_CLIENT
		
		subscribe
			-> the_bluetooth_client : BLUETOOTH_CLIENT
			require
				not subscribed;
			ensure
				delta {bt_client, subscribed};
				bt_client=the_bluetooth_client;
				subscribed;
			end
		unsubscribe
			require
				subscribed;
			ensure
				delta {bt_client, subscribed};
				not subscribed;
			end
	end
	--TODO class PHYSICAL_COMMUNICATOR inherit COMMUNICATOR for buttons+leds
	--TODO TOUCH_SCREEN inherit COMMUNICATOR
	class BLUETOOTH_CLIENT
end	


static_diagram WIFI_DEVICE_IDENTIFIER
component
	class DEVICE_IDENTIFIER --immutable
	feature
		encrypted : BOOLEAN
		identifier_string : STRING
	end
end
	
	
static_diagram QUBIE_KEYED_HASH
component
	class HASH reused
	class KEYED_HASH
	feature
		set : BOOLEAN --write-once
		set_key
			-> the_key : VALUE
			require
				not set
			ensure
				delta {set, key};
				key=the_key;
				set
			end
		hashed_string : VALUE
			->the_string : STRING
			require set
			ensure
				Result=hash.hash(the_string)
				--Return the keyed hash of the string
			end
--	constraint
--		old.set implies set
	--invariant
		--for_all a,b:STRING it_holds ((hashed_string(a)=hashed_string(b))=(a=b) )
		--exists a:STRING such_that (a /= hashed_string(a))
--	end
--	feature NONE
		key : VALUE --write-once
		hash : HASH --we know that hash is functional
	end
end
	
static_diagram QUBIE_CONTACT_RECORDINGS
component
	class TIME reused
	class CONTACT_RECORD --immutable
	feature
		device_id : DEVICE_IDENTIFIER
		contact_time : TIME
		rssi : VALUE
		frequency : FREQUNCY
	end
	class OBSERVATIONS inherit SET[CONTACT_RECORD] end --TODO make this a sequence, or perhaps list
end


static_diagram QUBIE_LOGGER
component 
	class LOG_ENTRY --immutable
	feature
		message : STRING
		time : STRING
	end
	class LOG persistent
	inherit LIST[LOG_ENTRY] 
	feature
--		entry++ : LOG_ENTRY {^LIST.element} --rename element as entry
		logged
			-> entry : OBJECT
			ensure
				delta element(size);
				contains(LOG_ENTRY.make(entry));
			end
		flush --TODO
		publish --TODO
	--constraint
	--	for_all i:[1..old.size] it_holds old element(i)=element(i)
	end
end
	
	
	



	
	