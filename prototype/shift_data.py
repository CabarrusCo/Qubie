#!/usr/bin/env python

"""
    Qubie Proof-of-Concept Passive WiFi Monitor
    Data File "Shifter"
    Written by Daniel M. Zimmerman (dmz@freeandfair.us)
    Copyright (C) 2016 Free & Fair
"""

import argparse
import csv
import traceback


def shift_rangefile(the_file, the_shift):
    assert isinstance(the_file, str)
    assert isinstance(the_shift, float)

    try:
        oldfile = open(the_file, 'r', 1)
        newfile = open(the_file.replace('.csv', '-shifted.csv'), 'w', 1)

        reader = csv.DictReader(oldfile)
        writer = csv.DictWriter(newfile,
                                fieldnames=['device', 'start_time', 'end_time',
                                            'min_rssi', 'max_rssi'])
        writer.writeheader()

        for row in reader:
            try:
              start_time = float(row['start_time']) + the_shift
              end_time = float(row['end_time']) + the_shift
              writer.writerow({'device': row['device'],
                               'start_time': start_time, 'end_time': end_time,
                               'min_rssi': row['min_rssi'], 'max_rssi': row['max_rssi']})
            except TypeError:
                print 'invalid range row encountered: {}'.format(row)
    except IOError:
        print 'problem shifting range file: {}'.format(traceback.format_exc())
        return


def shift_contactfile(the_file, the_shift):
    assert isinstance(the_file, str)
    assert isinstance(the_shift, float)

    try:
        oldfile = open(the_file, 'r', 1)
        newfile = open(the_file.replace('.csv', '-shifted.csv'), 'w', 1)

        reader = csv.DictReader(oldfile)
        writer = csv.DictWriter(newfile,
                                fieldnames=['device', 'time', 'rssi', 'frequency'])
        writer.writeheader()

        for row in reader:
            try:
                time = float(row['time']) + the_shift
                writer.writerow({'device': row['device'], 'time': time,
                                 'rssi': row['rssi'], 'frequency': row['frequency']})
            except TypeError:
                print 'invalid contact row encountered: {}'.format(row)
    except IOError:
        print 'problem shifting contact file: {}'.format(traceback.format_exc())
        return


if __name__ == '__main__':
    # parse the command line
    parser = argparse.ArgumentParser\
        (description='Time-shift data files generated by Qubie.')
    parser.add_argument('-r', '--rangefile', metavar='rangefile',
                        help='path to the device presence time range file')
    parser.add_argument('-c', '--contactfile', metavar='contactfile',
                        help='path to the device contact file')
    parser.add_argument('shift', metavar='shift', type=float,
                        help='the number of seconds to shift the log file by')
    args = parser.parse_args()

    if not args.rangefile and not args.contactfile:
        print 'No data files specified, exiting.'

    print 'shifting timestamps by {} seconds'.format(args.shift)

    if args.rangefile:
        assert isinstance(args.rangefile, str)
        if args.rangefile.endswith('.csv'):
            shift_rangefile(args.rangefile, args.shift)
        else:
            print 'invalid filename {} for device presence time range file, must end in .csv'

    if args.contactfile:
        assert isinstance(args.contactfile, str)
        if args.contactfile.endswith('.csv'):
            shift_contactfile(args.contactfile, args.shift)
        else:
            print 'invalid filename {} for device contact file, must end in .csv'
